[package]
edition = "2021"
name = "commy"
description = "Commy: a modular, distributed, and secure communication framework."
version = "0.1.0"
authors = ["Eric Evans <ciresnave@gmail.com>"]
repository = "https://github.com/ciresnave/commy"

[dependencies]
commy_common = { path = "commy_common" }
commy_macro = { path = "commy_macro" }

# Foundation layer dependencies
auth-framework = { version = "0.4", optional = true }
distributed-config = { version = "0.1", optional = true }
tokio = { version = "1.0", features = ["full"], optional = true }
uuid = { version = "1.0", features = ["v4", "serde"], optional = true }
tracing = { version = "0.1", optional = true }
tracing-subscriber = { version = "0.3", optional = true }

dashmap = { version = "6.1.0", optional = true }
libloading = { version = "0.8", optional = true }
bitflags = { version = "2.9.4", optional = true }
# Note: Removed sqlx due to sqlite3 linking conflict with auth-framework
# Will use file-based persistence instead
chrono = { version = "0.4", features = ["serde"], optional = true }
anyhow = { version = "1.0", optional = true }
thiserror = { version = "2.0.16", optional = true }
memmap2 = { version = "0.9", optional = true }
webpki-roots = { version = "1.0.2", optional = true }

# Serialization support
serde = { version = "1.0", features = ["derive"], optional = true }
serde_json = { version = "1.0", optional = true }
rmp-serde = { version = "1.1", optional = true }
bincode = { version = "2.0.1", optional = true }
tokio-rustls = { version = "0.26.2", optional = true }
rustls = { version = "0.23.31", optional = true }
rustls-pemfile = { version = "2.2.0", optional = true }
postcard = { version = "1.0", optional = true, features = [
    "alloc",
] } # Compact binary format
rkyv = { version = "0.8", optional = true } # Zero-copy serialization (Rust-only)
capnp = { version = "0.21.5", optional = true } # Cap'n Proto - polyglot zero-copy

# FFI support for multi-language SDKs
libc = { version = "0.2", optional = true }
once_cell = { version = "1.0", optional = true }
parking_lot = { version = "0.12", optional = true }
rand = { version = "0.9.2", optional = true }

async-trait = "0.1"
base64 = "0.21"
num-bigint-dig = "=0.8.4"

[features]
default = ["manager", "mesh", "ffi"]

# Foundation layer features
manager = [
    "tokio",
    "auth-framework",
    "distributed-config",
    "uuid",
    "tracing",
    "tracing-subscriber",
    "dashmap",
    "chrono",
    "anyhow",
    "thiserror",
    "bincode",
    "serde",
    "serde_json",
    "memmap2",
]

# Plugin support (loader + runtime registration)
plugins = ["libloading", "dashmap", "bitflags", "thiserror"]
network = [
    "tokio",
    "tokio-rustls",
    "rustls",
    "rustls-pemfile",
    "webpki-roots",
    "serde",
    "serde_json",
]
mesh = ["manager"]

# Individual serialization backends
json = ["serde", "serde_json"]
binary = ["serde", "bincode"]
messagepack = ["serde", "rmp-serde"]
compact = ["serde", "postcard"]
zerocopy = ["rkyv", "serde", "serde_json"]
capnproto = ["capnp"]

# Aggregate all serialization backends into a single opt-in feature for development/testing.
# This is non-default so CI and normal builds stay minimal; use `--features all_formats`
# when you want all serialization backends available for examples or integration tests.
all_formats = [
    "json",
    "binary",
    "messagepack",
    "compact",
    "zerocopy",
    "capnproto",
]

# Convenience feature (reduced surface)
# Note: removed broad `all_formats` and `polyglot_formats` to keep feature surface minimal.
serde_support = ["serde"]

# FFI features for multi-language SDK support
ffi = [
    "manager",
    "mesh",
    "libc",
    "once_cell",
    "parking_lot",
    "rand",
    "serde",
    "serde_json",
]

# Legacy FFI variants (opt-in)
ffi_minimal = []

[lib]
name = "commy"
crate-type = ["cdylib", "rlib"]

[dev-dependencies]
tempfile = "3.0"
tokio = { version = "1.0", features = ["full"] }
tokio-test = "0.4"
uuid = { version = "1.0", features = ["v4", "serde"] }
tracing-subscriber = { version = "0.3" }
rcgen = "0.9"
proptest = "1.0"

[patch.crates-io]
#[patch.crates-io]
# Local vendored override was used temporarily during investigation. We've
# reverted to the crates.io version to allow cargo fix/build to use the
# published `num-bigint-dig` until a permanent vendor removal or upstream
# fix is agreed.
# num-bigint-dig = { path = "vendor/num-bigint-dig", package = "num-bigint-dig" }
