name: Cap'n Proto Codegen CI
permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-capnp:
    name: Build with capnp codegen
    runs-on: ubuntu-latest
    env:
      # Request full backtraces from any Rust process so panics include verbose
      # frames for diagnosis (helps triaging capnpc panics in CI).
      RUST_BACKTRACE: full
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

      - name: Install Rust
        uses: actions-rs/toolchain@88dc2356392166efad76775c878094f4e83ff746
        with:
          toolchain: stable
          profile: minimal

      - name: Install capnp compiler (apt, fallback to build-from-source)
        run: |
          set -e
          sudo apt-get update || true
          if sudo apt-get install -y capnproto; then
            echo "capnproto installed via apt"
          else
            echo "apt install failed; attempting to build capnproto from source"
            sudo apt-get install -y build-essential cmake git pkg-config libssl-dev || true
            TMPDIR=/tmp/capnproto-src
            rm -rf "$TMPDIR"
            git clone --depth 1 https://github.com/capnproto/capnproto.git "$TMPDIR"
            pushd "$TMPDIR/c++"
            cmake -S . -B build || (echo "cmake configure failed" && exit 1)
            cmake --build build -- -j$(nproc) || (echo "build failed" && exit 1)
            sudo cmake --install build || (echo "install failed" && exit 1)
            popd
            echo "capnproto built and installed from source"
          fi

      - name: Install capnpc plugin (cargo, best-effort)
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          if cargo install capnpc --locked; then
            echo "capnpc plugin installed via cargo"
          else
            echo "cargo install capnpc failed; attempting to install capnpc-rust-bootstrap"
            cargo install capnpc-rust-bootstrap --locked || echo "capnpc bootstrap install failed; continuing for diagnostics"
          fi
          echo "PATH=$HOME/.cargo/bin:$PATH"

      - name: Show Cap'n Proto tooling
        run: |
          echo "PATH=$PATH"
          capnp --version || (echo 'capnp not found' && exit 1)
          # Detect capnpc binary; if it exists but crashes, continue so the
          # subsequent build step runs with RUST_BACKTRACE=1 to capture full
          # diagnostic information.
          if command -v capnpc >/dev/null 2>&1; then
            if ! capnpc --version >/dev/null 2>&1; then
              echo "capnpc present but failed to print version; continuing for diagnostics"
            else
              capnpc --version
            fi
          elif command -v capnpc-rust >/dev/null 2>&1; then
            if ! capnpc-rust --version >/dev/null 2>&1; then
              echo "capnpc-rust present but failed to print version; continuing for diagnostics"
            else
              capnpc-rust --version
            fi
          elif command -v capnpc-rust-bootstrap >/dev/null 2>&1; then
            if ! capnpc-rust-bootstrap --version >/dev/null 2>&1; then
              echo "capnpc-rust-bootstrap present but failed to print version; continuing for diagnostics"
            else
              capnpc-rust-bootstrap --version
            fi
          else
            echo 'capnpc not found' && exit 1
          fi

      - name: Build (capnproto + all_formats)
        run: |
          cargo build -p commy --features "all_formats" --verbose

      - name: Run tests (capnproto + all_formats)
        run: |
          cargo test -p commy --features "all_formats" --verbose

      - name: Upload capnpc diagnostics (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: capnpc-diagnostics-${{ runner.os }}
          path: |
            **/capnpc_diagnostics/**
          if-no-files-found: ignore
